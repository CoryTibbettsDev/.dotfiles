# .bashrc

# Automatically start xserver when in tty1 with no window manager running
# https://wiki.archlinux.org/title/Xinit#Installation
if [ "$(tty)" = "/dev/tty1" ]; then
	pgrep awesome || exec startx
fi

# Bash Prompt
# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo " ${BRANCH}${STAT}"
	else
		echo ""
	fi
}

# get current status of git repo
function parse_git_dirty() {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}

# ex - archive extractor
# usage: ex <file>
# Stolen from https://github.com/ChrisTitusTech/zsh
ex ()
{
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.tar.xz)    tar xJf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

export PS1="\[\e[36m\][\u@\h \w\`parse_git_branch\`]\$\[\e[m\] "

# History Settings
HISTCONTROL=ignoreboth

# Set editor details for programs that look for them
export VISUAL=nvim;
export EDITOR=nvim;

alias ls='ls --color=auto'
alias ll='ls -la'

# Wholesome Unix
alias pls='sudo'
alias please='sudo'
# In case I switch to doas
# alias pls='doas --'
# alias please='doas --'

alias cl='clear'

alias grep='grep --color'
# alias sgrep='grep -R -n -C 3 --exclude-dir={.git,.svn,CVS} '
alias sgrep='grep -R -n --exclude-dir={.git,.svn,CVS} '

alias h='history'
# alias hgrep="fc -El 0 | grep"
alias hgrep="history | grep"
alias hg="history | grep"

# Alias for nvim editor
# e is easy to reach and I remember with e for edit like in vim
alias e='nvim'

# Alias for my most command find command
alias myfind='find . -name'
alias mf='find . -name'

# Alias for YouTube command line search tool
alias yt='ytfzf'

alias youtube-dl='youtube-dl --no-call-home'
alias dl='youtube-dl --no-call-home'

# Compile a groff document into a pdf
groffpdf() {
	RAWINPUTFILE=$(echo ${1} | awk -F. '{print $1}')
	COMPILEDFILE=${RAWINPUTFILE}.pdf
	printf "groff compiling %b to %b \n" ${1} ${COMPILEDFILE}
	groff -mom -T pdf ${1} > ${COMPILEDFILE}
}

unset SSH_ASKPASS

# Append dircolors to bashrc
# dircolors -b >> .bashrc
