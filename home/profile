# .profile

# This file is symlinked to all the shell specific profiles
# such as .bash_profile, .zprofile etc.

export LIBRARY_FILE="${HOME}/.config/shell/lib.sh"
if [ ! -f "${LIBRARY_FILE}" ]; then
	printf ".profile: LIBRARY_FILE '%s' does not exist.\n" "${LIBRARY_FILE}" 1>&2
	return
fi
. "${LIBRARY_FILE}"

# Append our home directory bin dir
export PATH="$HOME/.bin:$PATH"

# ksh looks for ENV to source it's rc file
export ENV="$HOME/.kshrc"

# Set global variables for programs that look for them
# Export just in case it is not exported already
export EDITOR="${text_editor:-vi}"
export FCEDIT="$EDITOR"
export VISUAL="${visual_editor:-"$EDITOR"}"
export BROWSER="${web_browser}"
export READER="${document_viewer}"

# Some programs look for XDG dirs from exported shell variables and not from
# the $XDG_CONFIG_DIR/user-dirs.dirs or $HOME/.config/user-dirs.dirs file
# so export these in case so they can find config files and not mess with
# our other directories
export XDG_CONFIG_HOME="${config_dir}"
export XDG_CACHE_HOME="${cache_dir}"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_STATE_HOME="${HOME}/.local/state"

export XDG_DESKTOP_DIR="${XDG_DATA_HOME}/Desktop"
export XDG_DOCUMENTS_DIR="${downloads_dir}"
export XDG_DOWNLOAD_DIR="${downloads_dir}"
export XDG_MUSIC_DIR="${downloads_dir}"
export XDG_PICTURES_DIR="${downloads_dir}"
export XDG_PUBLICSHARE_DIR="${downloads_dir}"
export XDG_TEMPLATES_DIR="${downloads_dir}"
export XDG_VIDEOS_DIR="${downloads_dir}"

# Workarounds for programs annoyingly creating directories in $HOME
export PASSWORD_STORE_DIR="${XDG_DATA_HOME}/pass"
export GTK_RC_FILES="${XDG_CONFIG_HOME}/gtk-1.0/gtkrc"
export GTK2_RC_FILES="${XDG_CONFIG_HOME}/gtk-2.0/gtkrc"
export BASH_COMPLETION_USER_FILE="${XDG_CONFIG_HOME}/bash-completion/bash_completion"
export STACK_ROOT="${XDG_DATA_HOME}/stack"
export CABAL_DIR="${XDG_CACHE_HOME}/cabal"
export CABAL_CONFIG="${XDG_CONFIG_HOME}/cabal/config"
export RUSTUP_HOME="${XDG_DATA_HOME}/rustup"
export CARGO_HOME="${XDG_DATA_HOME}/cargo"
export GOPATH="${XDG_DATA_HOME}/go"
# https://drewdevault.com/2021/08/06/goproxy-breaks-go.html
export GOPROXY="direct"
export DOCKER_CONFIG="${XDG_CONFIG_HOME}/docker"
export ELINKS_CONFDIR="${XDG_CONFIG_HOME}/elinks"
export _JAVA_OPTIONS="-Djava.util.prefs.userRoot=${XDG_CONFIG_HOME}/java"
export KDEHOME="${XDG_CONFIG_HOME}/kde"
export MPLAYER_HOME="${XDG_CONFIG_HOME}/mplayer"
export MYSQL_HISTFILE="${XDG_DATA_HOME}/mysql_history"
export NODE_REPL_HISTORY="${XDG_DATA_HOME}/node_repl_history"
export NVM_DIR="${XDG_DATA_HOME}/nvm"

# Opt-out of telemetry where possible
# https://consoledonottrack.com
export DO_NOT_TRACK=1
# https://docs.microsoft.com/en-us/cli/azure/azure-cli-configuration#cli-configuration-values-and-environment-variables
export AZURE_CORE_COLLECT_TELEMETRY=false
# https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry#how-to-opt-out
export DOTNET_CLI_TELEMETRY_OPTOUT=1
# https://www.gatsbyjs.com/docs/telemetry/
export GATSBY_TELEMETRY_DISABLED=1
# https://docs.brew.sh/Analytics
export HOMEBREW_NO_ANALYTICS=1
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-telemetry.html
export SAM_CLI_TELEMETRY=0
# https://github.com/returntocorp/semgrep/blob/develop/PRIVACY.md
export SEMGREP_SEND_METRICS=off

# Shell specific rc file is not automatically sourced by login shells so we just
# source our own unique one anyway
. "${shellrc_file}"

# Automatically startx on login
# if [ -z "${DISPLAY}" -a "${XDG_VTNR}" -eq 1 ]; then
if test -z "${DISPLAY}"; then
	# Ask if we want to startx on login
	yes_no "Would you like to exec startx?" &&
		exec startx
fi
